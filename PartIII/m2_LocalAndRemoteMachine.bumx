machine m2_LocalAndRemoteMachine
refines m1_RepositoryMachine
sees c2_LocalAndRemoteContext
variables
	// New variables in m0
	branches
	branchSoftware
	branchMajor
	branchMinor
	branchPatch
	variables
	// New variables in m1
	repositories
	repoBranches
	repoSoftware
	variables
	// New variables in m2
	localRepositories
	remoteRepositories
	remote
	// TODO Add a variables for "remote" relationship mapping local repos to remote repos
invariants
	@local-remote: partition(repositories, localRepositories, remoteRepositories) //model every local has at least one remot(total relatione
	@remote-relation: remote ∈ localRepositories ↔ remoteRepositories
	// Every local should have at least 1 remote
	@dom-remote: dom(remote) = localRepositories
	// Remote and local has to contain the same software

	event INITIALISATION
	extends INITIALISATION
	then
		@init-local: localRepositories ≔ ∅
		@init-remote: remoteRepositories ≔ ∅
		@init-remote-relation: remote ≔ ∅
	end
	
	event CreateBranch
	extends CreateBranch
	end
	
	event CommitChangesPatch
	extends UpdateChangesPatch
	where 
		@is-local: repoBranches(b) ∈ localRepositories
	end	
	
	event CommitChangesMinor
	extends UpdateChangesMinor
	where 
		@is-local: repoBranches(b) ∈ localRepositories
	end	
	
	event CommitChangesMajor
	extends UpdateChangesMajor
	where 
		@is-local: repoBranches(b) ∈ localRepositories
	end	
	
	event UpdateChangesPatch
	extends UpdateChangesPatch
	end	
	
	event UpdateChangesMinor
	extends UpdateChangesMinor
	end	
	
	event UpdateChangesMajor
	extends UpdateChangesMajor
	end	

	event CloneLocalRepo
	extends CreateRepo
	any rm rb
	where
		@rm-is-remote: rm ∈ remoteRepositories
		@rb-is-remote: rb ∈ branches
		@rb-is-branch: repoBranches(rb) = rm
		@s-def: s = branchSoftware(rb)
		@mf-def: mj = branchMajor(rb)
		@mn-def: mn = branchMinor(rb)
		@p-def: p = branchPatch(rb)
		// TODO other definitions
	then
		@create-local-repo:  localRepositories ≔  localRepositories ∪ {r}		
		@remote-link: remote(r) ≔ rm //fixed
	end
	
	event CreateRemoteRepo
	extends CreateRepo
	then
		@create-remote-repo:  remoteRepositories ≔  remoteRepositories ∪ {r}
	end
	
	event RemoveBranch
	extends RemoveBranch
	end
	
	event RemoveLocalRepo
	extends RemoveRepo
	where
		@is-local: r ∈ localRepositories
	then
		@remove-local: localRepositories ≔  localRepositories ∖ {r}
		@remove-remote: remote ≔ {r} ⩤ remote //fixed
	end
	
//	event RemoveRemotelRepo
//	extends RemoveRepo
//	any rs
//	where
//		@is-remote: r ∈ remoteRepositories
//		@repos: rs = remote∼[{r}]
//	then
//		@remove-remote1: remoteRepositories ≔  remoteRepositories ∖ {r}
//		@remove-remote: remote ≔ rs ⩤ remote
//	end
	//event RemoveRepo
	
	//next remote and local; empty remote
	
	
	// TODO event to add a new remote to a local branch
	// TODO event to remove a remote from a local branch
		
		
		
		
		
		
		
		